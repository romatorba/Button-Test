// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7nM6r7HjBdt6ZRgVtAxBkm
// Component: Fkal6KpxwF
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_empty_project.module.css"; // plasmic-import: 7nM6r7HjBdt6ZRgVtAxBkm/projectcss
import * as sty from "./PlasmicButton.module.css"; // plasmic-import: Fkal6KpxwF/css
import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: 4B9SobYc8/icon

export const PlasmicButton__VariantProps = new Array("withIcon", "noIcon");

export const PlasmicButton__ArgProps = new Array();

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__noIcon]: hasVariant(variants, "noIcon", "noIcon"),
        [sty.root__withIcon]: hasVariant(variants, "withIcon", "withIcon"),
        [sty.root__withIcon_noIcon]:
          hasVariant(variants, "withIcon", "withIcon") &&
          hasVariant(variants, "noIcon", "noIcon")
      })}
    >
      {(hasVariant(variants, "noIcon", "noIcon") ? false : true) ? (
        <StarIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg, {
            [sty.svg__noIcon]: hasVariant(variants, "noIcon", "noIcon")
          })}
          role={"img"}
        />
      ) : null}

      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.box, {
          [sty.box__noIcon]: hasVariant(variants, "noIcon", "noIcon")
        })}
      >
        {"Button"}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "box"],
  svg: ["svg"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
